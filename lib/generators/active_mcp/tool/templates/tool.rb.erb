class <%= class_name %> < ActiveMcp::Tool::Base
  def tool_name
    "<%= file_name.humanize %>"
  end

  def description
    "<%= file_name.humanize %>"
  end
  
  argument :param1, :string, required: true, description: "First parameter description"
  argument :param2, :string, required: false, description: "Second parameter description"
  # Add more parameters as needed
  
  # Uncomment and modify this method to implement authorization control
  # This controls who can see and use this tool
  # def visible?(context: {})
  #   # Example: require authentication
  #   # return false unless context
  #   
  #   # Example: require a specific authentication type
  #   # return false unless context[:auth_info][:type] == :bearer
  #   
  #   # Example: check for admin permissions
  #   # admin_tokens = ["admin-token"]
  #   # return admin_tokens.include?(context[:auth_info][:token])
  #   
  #   # Default: allow all access
  #   true
  # end
  
  def call(param1:, param2: nil, context: {})
    # Authentication information can be accessed via _auth_info parameter
    # context = { auth_info: { type: :bearer, token: "xxx", header: "Bearer xxx" } }
    # or { auth_info: { type: :basic, token: "base64encoded", header: "Basic base64encoded" } }

    # Implement tool logic here

    # Return a string, hash, or any JSON-serializable object
    "Tool executed successfully with #{param1}"
  end
end
