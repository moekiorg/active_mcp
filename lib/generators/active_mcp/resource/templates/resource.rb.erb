class <%= class_name %>
  def initialize(auth_info:)
    @auth_info = auth_info

    # Authentication information can be accessed via @auth_info parameter
    # @auth_info = { type: :bearer, token: "xxx", header: "Bearer xxx" }
    # or { type: :basic, token: "base64encoded", header: "Basic base64encoded" }
  end

  def name
    "<%= file_name %>"
  end

  def uri
    "data://localhost/<%= file_name %>"
  end

  def mime_type
    "application/json"
  end
  
  def description
    "<%= file_name.humanize %>"
  end

  # Uncomment and modify this method to implement authorization control
  # This controls who can see and use this tool
  # def visible?
  #   # Example: require authentication
  #   # return false unless @auth_info
  #   
  #   # Example: require a specific authentication type
  #   # return false unless @auth_info[:type] == :bearer
  #   
  #   # Example: check for admin permissions
  #   # admin_tokens = ["admin-token"]
  #   # return admin_tokens.include?(@auth_info[:token])
  #   
  #   # Default: allow all access
  #   true
  # end
  
  def text
    # Return a string, hash, or any JSON-serializable object
    { foo: "bar" }
  end

  # def blob
  #   File.read("/path/to/file")
  # end
end
